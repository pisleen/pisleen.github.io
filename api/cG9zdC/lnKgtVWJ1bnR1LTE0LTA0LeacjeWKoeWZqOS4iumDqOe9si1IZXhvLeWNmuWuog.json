{"title":"在 Ubuntu 14.04 服务器上部署 Hexo 博客","date":"2018-11-13T04:55:49.000Z","slug":"在-Ubuntu-14-04-服务器上部署-Hexo-博客","tags":["Hexo","服务器"],"categories":["Ubuntu"],"updated":"2018-11-13T07:56:31.756Z","content":"<hr>\n<p>Hexo 是用 Node.js 开发的一个静态站点生成器（Static Site Generator），支持 Markdown 语法写作，有着强大的插件系统，而且性能优异。下面我推荐的这篇文章，介绍如何在一台 Ubuntu 14.04 的 CVM 云服务器上快速部署 Hexo 博客站点，如何快速发布一篇博文并通过云服务器上的私有 Git 仓库部署到 Web 服务器目录下；希望对大家有所帮助。</p>\n<p>以下为文章原文</p>\n<p>除了闷头专研技术之外，程序员还需要不断地写作进行技术积累，写博客是其中最重要的方式之一。商业博客平台不少，但是更符合程序员背景的方案，是自己开发一个博客平台或者使用开源的博客平台。</p>\n<p>开源的博客平台多如牛毛，而且不乏优秀之作，如 Hexo、Octopress、Jekyll、Wordpress。本系列文章将分享如何利用各种博客引擎在云端搭建属于自己的个人博客。今天是第一篇，介绍如何在 Ubuntu 14.04 上部署 Hexo 博客。</p>\n<p>Hexo 是用 Node.js 开发的一个静态站点生成器（Static Site Generator），支持 Markdown 语法写作，有着强大的插件系统，而且性能优异。阅读不少技术社区分享的文章时，看到国内不少同学都有在用这个引擎，看来「市场占有率」不低。</p>\n<p>本文将介绍如何在一台 Ubuntu 14.04 的 CVM 云服务器上快速部署 Hexo 博客站点，如何快速发布一篇博文并通过云服务器上的私有 Git 仓库部署到 Web 服务器目录下。</p>\n<p>前提条件</p>\n<p>如果想跟着本教程顺利完成 Hexo 博客的搭建，需要具备以下条件：</p>\n<p>一台安装了 Ubuntu 14.04 的CVM 云服务器。一般个人博客的流量都比较低，初期选择 1核 1GB内存类型的服务器即可，而且有不少免费试用的时间。</p>\n<p>在本地电脑上安装 Node.js 和 npm，建议谷歌相应关键词了解具体步骤。</p>\n<p>此外，还要在云服务器上安装 Git 和 Nginx 两个必备的软件包。Git 用于版本管理和部署，Nginx 用于静态博客托管。</p>\n<p>sudo apt-get updatesudo apt-get install git nginx -y</p>\n<p>另外，本文均以 Windows 为例，演示在本地端的操作，Mac 上的操作会更为简单。Windows 上没有 Mac 的 iTerm2 ，我们以ConEmu+Git Bash组成的终端作为替代。如果有读者感兴趣，后续再撰文介绍具体配置方法。</p>\n<ol>\n<li>本地 Hexo 安装及初始化</li>\n</ol>\n<p>NPM 上还有许多 Hexo 相关的包，但是只要安装好了 hexo-cli 和 hexo-server 这两个核心组件之后，就可以让博客跑起来了。</p>\n<p>我们使用 Node.js 的包管理器 npm 安装 hexo-cli 和 hexo-server。</p>\n<p>npm install hexo-cli hexo-server -g</p>\n<p>hexo-cli 是 Hexo 的命令行工具，可用于快速新建、发布、部署博客；hexo-server 是 Hexo 的内建服务器，可用于部署前的预览和测试。-g 选项，表示全局安装。</p>\n<p>接下来，为 Hexo 博客做一些基础配置，包括创建基础文件。这步操作很简单，Hexo 提供了一个快捷命令，只需要提供一个存放文件的目录地址即可。</p>\n<p>hexo init ~/hexo_blog</p>\n<p>在国内环境下执行该命令，速度会有些慢。因为需要从 Hexo 在 Github 上的仓库克隆；仓库克隆成功后，会自动执行一系列 npm 命令，自安装依赖模块。</p>\n<p>这时，我们就已经有了一个写作、管理博客的环境。</p>\n<ol start=\"2\">\n<li>云端服务器配置</li>\n</ol>\n<p>完成本地端的操作之后，暂时回到服务器的配置。在下面的操作之前，请确保已经购买了一台云服务器，并且能够以 ubuntu 用户身份正常登陆。</p>\n<p>在这部分，要完成以下件事情：</p>\n<p>为本地的 hexo_blog 配置一个部署静态文件的远程仓库。</p>\n<p>许多教程均以 Github 作为中转的平台，但是会让整个流程变得更为复杂，而且会受服务器与 Github 之间网络情况的影响。假如 Github 宕机或者被封，你将无法更新博客。</p>\n<p>配置 Nginx 托管博客文件目录。</p>\n<p>配置远程仓库自动更新到博客文件目录的钩子。</p>\n<p>2.1 创建私有 Git 仓库</p>\n<p>在 /var/repo/ 下，创建一个名为 hexo_static 的裸仓库（bare repo）。</p>\n<p>如果没有 /var/repo 目录，需要先创建；然后修改目录的所有权和用户权限，之后 ubuntu 用户都具备/var/repo 目录下所有新生成的目录和文件的权限。</p>\n<p>sudo mkdir /var/repo/sudo chown -R $USER:$USER /var/repo/sudo chmod -R 755 /var/repo/</p>\n<p>然后，执行如下命令：</p>\n<p>cd /var/repo/git init –bare hexo_static.git</p>\n<p>2.2 配置 Nginx 托管文件目录</p>\n<p>接下来，创建 /var/www/hexo 目录，用于 Nginx 托管。</p>\n<p>sudo mkdir -p /var/www/hexo</p>\n<p>和上一步类似，这里也需要修改目录的所有权和权限。</p>\n<p>sudo chown -R $USER:$USER /var/www/hexosudo chmod -R 755 /var/www/hexo</p>\n<p>然后，修改 Nginx 的 default 设置：</p>\n<p>sudo vim /etc/nginx/sites-available/default</p>\n<p>将其中的 root 指令指向 /var/www/hexo 目录。</p>\n<p>…server {    listen 80 default_server;    listen [::]:80 default_server ipv6only=on;    root /var/www/hexo; # 需要修改的部分    index index.html index.htm;…</p>\n<p>保存并退出文件。如果以后购买并备案域名之后，可以再将配置中的 default_server 修改为你的域名。</p>\n<p>最后，重启 Nginx 服务，使得改动生效。</p>\n<p>sudo service nginx restart</p>\n<p>做完这一步之后，你去访问服务器的 IP 时，应该还是会报错的，因为 /var/www/hexo 目录是空的。</p>\n<p>2.3 创建 Git 钩子</p>\n<p>接下来，在服务器上的裸仓库 hexo_static 创建一个钩子，在满足特定条件时将静态 HTML 文件传送到 Web 服务器的目录下，即 /var/www/hexo。</p>\n<p>在自动生成的 hooks 目录下创建一个新的钩子文件：</p>\n<p>vim /var/repo/hexo_static.git/hooks/post-receive</p>\n<p>在该文件中添加两行代码，指定 Git 的工作树（源代码）和 Git 目录（配置文件等）。</p>\n<p>#!/bin/bashgit –work-tree=/var/www/hexo –git-dir=/var/repo/hexo_static.git checkout -f</p>\n<p>保存并退出文件，并让该文件变为可执行文件。</p>\n<p>chmod +x /var/repo/hexo_static.git/hooks/post-receive</p>\n<p>至此，服务端的配置基本结束。</p>\n<ol start=\"3\">\n<li>完成本地 Hexo 配置</li>\n</ol>\n<p>在第三部分的操作中，我们将完成以下任务：</p>\n<p>修改 Hexo 配置中的 URL 和默认文章版式；</p>\n<p>新建博客草稿并发布</p>\n<p>配置自动部署到服务器端的 hexo_static 裸仓库；</p>\n<p>3.1 修改 Hexo 部分默认配置</p>\n<p>进入 hexo_blog 目录后，主要有以下文件。</p>\n<p>-rw-r–r– 1 benjisong 1049089 1619 Feb 24 14:45 _config.yml-rw-r–r– 1 benjisong 1049089  174 Feb 24 13:51 db.jsondrwxr-xr-x 1 benjisong 1049089    0 Feb 24 12:16 node_modules-rw-r–r– 1 benjisong 1049089  484 Feb 24 12:16 package.jsondrwxr-xr-x 1 benjisong 1049089    0 Feb 24 13:50 publicdrwxr-xr-x 1 benjisong 1049089    0 Feb 24 12:08 scaffoldsdrwxr-xr-x 1 benjisong 1049089    0 Feb 24 12:13 sourcedrwxr-xr-x 1 benjisong 1049089    0 Feb 24 12:08 themes</p>\n<p>其中，_config.yml 为 Hexo 的主配置文件。我们首先修改博客的 URL 地址。</p>\n<h1 id=\"URL-If-your-site-is-put-in-a-subdirectory-set-url-as-‘http-yoursite-com-child-39-and-root-as-‘-child-‘url-http-server-ip-没有绑定域名时填写服务器的实际-IP-地址。root-permalink-year-month-day-title-permalink-defaults\"><a href=\"#URL-If-your-site-is-put-in-a-subdirectory-set-url-as-‘http-yoursite-com-child-39-and-root-as-‘-child-‘url-http-server-ip-没有绑定域名时填写服务器的实际-IP-地址。root-permalink-year-month-day-title-permalink-defaults\" class=\"headerlink\" title=\"URL## If your site is put in a subdirectory, set url as ‘http://yoursite.com/child&#39; and root as ‘/child/‘url: http://server-ip # 没有绑定域名时填写服务器的实际 IP 地址。root: /permalink: :year/:month/:day/:title/permalink_defaults:\"></a>URL## If your site is put in a subdirectory, set url as ‘<a href=\"http://yoursite.com/child&#39;\">http://yoursite.com/child&#39;</a> and root as ‘/child/‘url: <a href=\"http://server-ip\" target=\"_blank\" rel=\"noopener\">http://server-ip</a> # 没有绑定域名时填写服务器的实际 IP 地址。root: /permalink: :year/:month/:day/:title/permalink_defaults:</h1><p>接下来，修改 default_layout，该字段位于在 Writing 部分。将其从 post 修改为 draft ，表示每篇博文默认都是草稿，必须经过发布之后才能在博客站点上访问。</p>\n<h1 id=\"Writingnew-post-name-title-md-File-name-of-new-postsdefault-layout-draft-原来的值是-posttitlecase-false-Transform-title-into-titlecase\"><a href=\"#Writingnew-post-name-title-md-File-name-of-new-postsdefault-layout-draft-原来的值是-posttitlecase-false-Transform-title-into-titlecase\" class=\"headerlink\" title=\"Writingnew_post_name: :title.md # File name of new postsdefault_layout: draft # 原来的值是 posttitlecase: false # Transform title into titlecase\"></a>Writingnew_post_name: :title.md # File name of new postsdefault_layout: draft # 原来的值是 posttitlecase: false # Transform title into titlecase</h1><p>暂时保存并退出文件。在 3.3 部分继续进行配置。</p>\n<p>3.2. 新建博客草稿并发布</p>\n<p>这里简单演示通过 Hexo 新建博文草稿，并发布的过程。</p>\n<p>执行如下命令，创建第一篇博文。</p>\n<p>hexo new first-post</p>\n<p>你会看到类似如下输出：</p>\n<p>INFO  Created: ~\\Workspace\\Git\\hexo_blog\\source_drafts\\first-post.md</p>\n<p>在本地通过自己熟悉的编辑器，编辑博文。这里，我们把本文的内容写入第一篇博客中。</p>\n<p>title: 在 Ubuntu 14.04 服务器上部署 Hexo 博客tags:  - Ubuntu  - Hexocategories:  - Hexocomments: truedate: 2017-02-24 15:31:00—## 以下为 Markdown 文章正文。</p>\n<p>然后，通过如下命令发布博客：</p>\n<p>hexo publish first-post</p>\n<p>输出类似下面这样：</p>\n<p>INFO  Published: ~\\Workspace\\Git\\hexo_blog\\source_posts\\first-post.md</p>\n<p>博客推送到服务器之后，就可以在网站上访问了。</p>\n<p>3.3 通过 Git 部署</p>\n<p>到了这一步，可以说万事俱备，只欠东风了。这个东风，就是通过 Git 将 Hexo 生成的静态内容推送到服务器。</p>\n<p>继续编辑 _config.yml 文件，找到 Deployment 部分，按照如下情况修改：</p>\n<p>deploy:    type: git    repo: ubuntu@CVM 云服务器的IP地址:/var/repo/hexo_static    branch: master</p>\n<p>保存并退出文件。</p>\n<p>之后，需要安装一个 Hexo 包，负责将博客所需的静态内容发送到设置好的 Git 仓库。</p>\n<p>npm install hexo-deployer-git –save</p>\n<p>安装好后可以测试部署：</p>\n<p>hexo generate &amp;&amp; hexo deploy</p>\n<p>期间可能会提示输入 ubuntu 用户的登录密码（如果没有设置 SSH 登录）。成功之后的输出大致如下：</p>\n<p>… create mode 100644 tags/Node-js/index.html create mode 100644 tags/Ubuntu/index.htmlBranch master set up to track remote branch master from <a href=\"mailto:ubuntu@139.199.170.173\" target=\"_blank\" rel=\"noopener\">ubuntu@139.199.170.173</a>:/var/repo/hexo_static.To 139.199.170.173:/var/repo/hexo_static * [new branch]      HEAD -&gt; masterINFO  Deploy done: git</p>\n<p>现在，我们就可以在浏览器中打开 139.199.170.173，即可看到自己的博客网站了。</p>\n<p>我们发现，Hexo 对 blockquote 标签的样式并不太美观，需要后续再调优。</p>\n<ol start=\"4\">\n<li>通过镜像快速部署</li>\n</ol>\n<p>本文虽然将 Hexo 博客的大致部署过程明确地列出，但是对于部分初学用户来说可能还会显得较为复杂。如何利用 CVM 云服务器提供商（即腾讯云）的其他服务，快速让其他用户不必经过上面的步骤，快速进行部署呢？</p>\n<p>在云计算中，与虚拟机相关的一个概念是镜像（Image）。用户通过镜像，可以一键启动多个配置一模一样的云服务器。我们这一步通过 CVM 的「制作系统镜像」功能，将 Hexo 博客的服务器端打包。</p>\n<p>打包后的镜像，还可以上传到官方的服务市场，供所有用户使用；还可以直接共享给其他用户。</p>\n<p>如果有用户希望使用该镜像，可在本文下方评论区留下自己的腾讯云账号（登录时使用的QQ号或邮箱）。</p>\n<p>4.1 镜像的使用</p>\n<p>镜像中已经设置好了服务端，通过镜像启动 CVM 云服务器之后，读者只需要根据本文第三部分「完成 Hexo 本地配置」中的步骤，设置好本地 Hexo 写作环境的部署地址和服务器 URL等参数即可。</p>\n<p>这里有一点一定要注意，通过镜像启动云服务器时，务必重新设置密码或密钥，否则镜像的制作者有可能轻松地登录你的服务器。</p>\n<p>不要选择上图中的方式安装。</p>\n<p>总结</p>\n<p>本文较为完整地介绍了 Hexo 博客的安装及初始化，服务端如何配置通过 Git 部署等。与其他教程不同，我们没有使用公开的 Github 等第三方服务，而是直接在服务器上创建了私有仓库。然后，通过 Git 钩子，将 Hexo 生成的博客静态文件，快速地推送到 Web 服务的托管目录。</p>\n<p>由于 Hexo 是采用 Node.js 开发的，可能对于其他语言的学习者来说吸引力不大，因为后续自主二次开发难度较高。因此，后续笔者还将介绍其他语言的博客引擎，如用 Python 编写的 Lektor 和用 PHP 编写的 Wordpress 等。</p>\n<p>敬请期待。</p>\n<p>文章出自腾讯云技术社区</p>\n<p>（埋文字链<a href=\"https://www.qcloud.com/community/article/241080001487926962）\" target=\"_blank\" rel=\"noopener\">https://www.qcloud.com/community/article/241080001487926962）</a></p>\n<p>作者：星芒红哥<br>链接：<a href=\"https://www.jianshu.com/p/9750c2b625da\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/9750c2b625da</a><br>來源：简书</p>\n","prev":{"title":"Dota AI命令大全","slug":"Dota-AI命令"},"next":{"title":"Hello World","slug":"hello-world"},"link":"http://yoursite.com/post/在-Ubuntu-14-04-服务器上部署-Hexo-博客/","toc":[{"title":"URL## If your site is put in a subdirectory, set url as ‘<a href=\"http://yoursite.com/child&#39;\">http://yoursite.com/child&#39;</a> and root as ‘/child/‘url: <a href=\"http://server-ip\" target=\"_blank\" rel=\"noopener\">http://server-ip</a> # 没有绑定域名时填写服务器的实际 IP 地址。root: /permalink: :year/:month/:day/:title/permalink_defaults:","id":"URL-If-your-site-is-put-in-a-subdirectory-set-url-as-‘http-yoursite-com-child-39-and-root-as-‘-child-‘url-http-server-ip-没有绑定域名时填写服务器的实际-IP-地址。root-permalink-year-month-day-title-permalink-defaults","index":"1"},{"title":"Writingnew_post_name: :title.md # File name of new postsdefault_layout: draft # 原来的值是 posttitlecase: false # Transform title into titlecase","id":"Writingnew-post-name-title-md-File-name-of-new-postsdefault-layout-draft-原来的值是-posttitlecase-false-Transform-title-into-titlecase","index":"2"}]}